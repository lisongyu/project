 时光穿梭
现在，运行git status命令看看结果：
$ git status
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#    modified:   readme.txt红色
#
no changes added to commit (use "git add" and/or "git commit -a")
git status命令可以让我们时刻掌握仓库当前的状态
使用diff查看修改了哪个
$ git diff git.txt 
git diff顾名思义就是查看difference
修改后仍需要 add commit 
     版本回退  
查看都修改了哪些命令log
$ git log
   如果觉得查看内容太繁杂可以用
$ git log --pretty=oneline
3628164fb26d48395383f8f31179f24e0882e1e0 append GPL               //3628164fb26d48395383f8f31179f24e0882e1e0 是commit id 
ea34578d5496d7dd233c827ed32a8cd576c5ee85 add distributed
cb926e7ea50ad11b8f9e909c05226233bf755030 wrote a readme file

准备把git.txt回退到上一个版本，也就是“add distributed”的那个版本，怎么做呢？
首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交“ 3628164...882e1e0”（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
回退命令
现在，我们要把当前版本“append GPL”回退到上一个版本“add distributed”，就可以使用git reset命令：
$ git reset --hard HEAD^    回退命令
使用 cat 查看文本内容

最新的那个版本“append GPL”已经看不到了！好比你从21世纪坐时光穿梭机来到了19世纪，想再回去已经回不去了，肿么办？
办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个“append GPL”的commit id是“3628164...”，于是就可以指定回到未来的某个版本：
$ git reset --hard 3628164              id 只前几个就好自动
HEAD is now at 3628164 append GPL
关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的commit id怎么办？
使用命令$ git reflog

工作区和暂存区
了解其原理即可。
撤销修改
Git会告诉你，git checkout -- file可以丢弃工作区的修改：
$ git checkout -- git.txt                   只可回退一次吗？
命令git checkout -- git.txt意思就是，把git.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
git checkout -- file命令中的“--”很重要，没有“--”，就变成了“创建一个新分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。

如果 add了如何处理：
Git同样告诉我们，用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：
$ git reset HEAD git.txt
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。

删除文件

$ rm git.txt
通过status查看变化

现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且commit：
$ git rm git.txt
rm 'git.txt'
$ git commit -m "remove git.txt"
[master d17efd8] remove git.txt
 1 file changed, 1 deletion(-)
 delete mode 100644 git.txt
命令 git rm git.txt
git commit -m "remove git.txt"
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
